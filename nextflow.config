manifest {
    author = 'Patrick Blaney'
    homePage = 'https://github.com/pblaney/mgp1000'
    description = 'Myeloma Genome Project 1000 Bioinformatics Nextflow Pipeline'
    name = 'MGP1000'
    nextflowVersion = '>=20.01.0'
}

// Set global default parameters used in config file that will be overwritten with CLI run command
params.email = null
params.run_id = null
params.cpus = null
params.memory = null

notification {
    
    if( "${params.email}" ) {
        enabled = true
        to = "${params.email}"
        from = "${params.email}"
    } else {
        enabled = false
    }
}

report {
    enabled = true
    file = "nextflow_report.${params.run_id}.html"
}

trace {
    enabled = true
    fields = "task_id,hash,native_id,process,tag,name,status,exit,module,container,cpus,time,disk,memory,attempt,submit,start,complete,duration,realtime,queue,%cpu,%mem,rss,vmem,peak_rss,peak_vmem,rchar,wchar,syscr,syscw,read_bytes,write_bytes"
    file = "trace.${params.run_id}.txt"
    raw = true
}

timeline {
    enabled = true
    file = "timeline_report.${params.run_id}.html"
}

// #################################################### \\
// ~~~~~~~~~~~~~~ PROFILE CONFIGURATION ~~~~~~~~~~~~~~~ \\

params.singularity_module = null

profiles {

    // Profile for Preprocessing step of pipeline using Slurm executor
    preprocessing {
        
        singularity.enabled = true
        singularity.autoMounts = true

        // Set the Singularity module if one was provided as input parameter
        if( params.singularity_module ) {
            process.module = "${params.singularity_module}"
        }

        process.executor = 'slurm'
        process.clusterOptions = '--ntasks-per-node=1'

        executor.queueSize = 100
        executor.queueStatInterval = '3 min'
        executor.exitReadTimeout = '60 min'
        executor.submitRateLimit = '10 sec'

        process {

            errorStrategy = { sleep(Math.pow(2, task.attempt) * 200 as long); return 'retry' }
            maxRetries = 3

            withName: revertMappedBam_gatk {
                container = "containers/gatk-4.1.7.0.simg"
                cpus = params.cpus ?: 1
                memory = params.memory ?: { 18.GB * task.attempt }
                time = { 13.h * task.attempt }
            }
            withName: bamToFastq_biobambam {
                container = "containers/biobambam-2.0.87.simg"
                cpus = params.cpus ?: 1
                memory = params.memory ?: { 256.MB * task.attempt }
                time = { 24.h * task.attempt }
            }
            withName: fastqTrimming_trimmomatic {
                container = "containers/trimmomatic-0.36.simg"
                cpus = params.cpus ?: 8
                memory = params.memory ?: { 6.GB * task.attempt }
                time = { 18.h * task.attempt }
            }
            withName: fastqQualityControlMetrics_fastqc {
                container = "containers/fastqc-0.11.9.simg"
                cpus = params.cpus ?: 1
                memory = params.memory ?: { 512.MB * task.attempt }
                time = { 13.h * task.attempt }
            }
            withName: alignment_bwa {
                container = "containers/bwa-0.7.17-sambamba-0.7.1.simg"
                cpus = params.cpus ?: 10
                memory = params.memory ?: { 64.GB * task.attempt }
                time = { 32.h * task.attempt }
            }
            withName: fixMateInformationAndSort_gatk {
                container = "containers/gatk-4.1.7.0.simg"
                cpus = params.cpus ?: 2
                memory = params.memory ?: { 18.GB * task.attempt }
                time = { 24.h * task.attempt }
            }
            withName: markDuplicatesAndIndex_sambamba {
                container = "containers/sambamba-0.7.1.simg"
                cpus = params.cpus ?: 1
                memory = params.memory ?: { 8.GB * task.attempt }
                time = { 18.h * task.attempt }
            }
            withName: downsampleBam_gatk {
                container = "containers/gatk-4.1.7.0.simg"
                cpus = params.cpus ?: 2
                memory = params.memory ?: { 14.GB * task.attempt }
                time = { 13.h * task.attempt }
            }
            withName: baseRecalibrator_gatk {
                container = "containers/gatk-4.1.7.0.simg"
                cpus = params.cpus ?: 2
                memory = params.memory ?: { 8.GB * task.attempt }
                time = { 13.h * task.attempt }
            }
            withName: applyBqsr_gatk {
                container = "containers/gatk-4.1.7.0.simg"
                cpus = params.cpus ?: 2
                memory = params.memory ?: { 10.GB * task.attempt }
                time = { 13.h * task.attempt }
            }
            withName: collectWgsMetrics_gatk {
                container = "containers/gatk-4.1.7.0.simg"
                cpus = params.cpus ?: 2
                memory = params.memory ?: { 10.GB * task.attempt }
                time = { 13.h * task.attempt }
            }
            withName: collectGcBiasMetrics_gatk {
                container = "containers/gatk-4.1.7.0.simg"
                cpus = params.cpus ?: 2
                memory = params.memory ?: { 10.GB * task.attempt }
                time = { 13.h * task.attempt }
            }
            withName: extremeBamQualityControl_qualimap {
                container = "containers/qualimap-2.2.1.simg"
                cpus = params.cpus ?: 8
                memory = params.memory ?: { 8.GB * task.attempt }
                time = { 13.h * task.attempt }
            }
        }
    }

    // Profile for Germline Variant Analysis step of pipeline using Slurm executor
    germline {

        singularity.enabled = true
        singularity.autoMounts = true

        // Set the Singularity module if one was provided as input parameter
        if( params.singularity_module ) {
            process.module = "${params.singularity_module}"
        }

        process.executor = 'slurm'
        process.clusterOptions = '--ntasks-per-node=1'

        executor.queueSize = 50
        executor.queueStatInterval = '3 min'
        executor.exitReadTimeout = '60 min'
        executor.submitRateLimit = '10 sec'

        process {

            errorStrategy = { sleep(Math.pow(2, task.attempt) * 200 as long); return 'retry' }
            maxRetries = 3

            withName: splitIntervalList_gatk {
                container = "containers/gatk-4.1.7.0.simg"
                cpus = params.cpus ?: 1
                memory = params.memory ?: 1.GB
                time = 1.h
            }
            withName: haplotypeCaller_gatk {
                container = "containers/gatk-4.1.7.0.simg"
                cpus = params.cpus ?: 1
                memory = params.memory ?: { 10.GB * task.attempt }
                time = { 24.h * task.attempt }
            }
            withName: mergeAndSortGvcfs_gatk {
                container = "containers/gatk-4.1.7.0.simg"
                cpus = params.cpus ?: 1
                memory = params.memory ?: { 14.GB * task.attempt }
                time = { 13.h * task.attempt }
            }
            withName: combineAllGvcfs_gatk {
                container = "containers/gatk-4.1.7.0.simg"
                cpus = params.cpus ?: 1
                memory = params.memory ?: { 16.GB * task.attempt }
                time = { 60.h * task.attempt }
            }
            withName: jointGenotyping_gatk {
                container = "containers/gatk-4.1.7.0.simg"
                cpus = params.cpus ?: 1
                memory = params.memory ?: {10.GB * task.attempt }
                time = { 60.h * task.attempt }
            }
            withName: excessHeterozygosityHardFilter_gatk {
                container = "containers/gatk-4.1.7.0.simg"
                cpus = params.cpus ?: 1
                memory = params.memory ?: { 2.GB * task.attempt }
                time = { 13.h * task.attempt }
            }
            withName: indelVariantRecalibration_gatk {
                container = "containers/gatk-4.1.7.0.simg"
                cpus = params.cpus ?: 1
                memory = params.memory ?: { 6.GB * task.attempt }
                time = { 13.h * task.attempt }
            }
            withName: snpVariantRecalibration_gatk {
                container = "containers/gatk-4.1.7.0.simg"
                cpus = params.cpus ?: 1
                memory = params.memory ?: { 10.GB * task.attempt }
                time = { 13.h * task.attempt }
            }
            withName: applyIndelAndSnpVqsr_gatk {
                container = "containers/gatk-4.1.7.0.simg"
                cpus = params.cpus ?: 1
                memory = params.memory ?: { 4.GB * task.attempt }
                time = { 13.h * task.attempt }
            }
            withName: splitMultiallelicAndLeftNormalizeVcf_bcftools {
                container = "containers/bcftools-1.10.2.simg"
                cpus = params.cpus ?: 8
                memory = params.memory ?: { 1.GB * task.attempt }
                time = { 13.h * task.attempt }
            }
            withName: downloadVepAnnotationReferences_vep {
                container = "containers/vep-101.0.simg"
                cpus = params.cpus ?: 1
                memory = params.memory ?: 256.MB
                time = 1.h
            }
            withName: annotateGermlineVcf_vep {
                container = "containers/vep-101.0.simg"
                cpus = params.cpus ?: 1
                memory = params.memory ?: { 4.GB * task.attempt }
                time = { 18.h * task.attempt }
            }
            withName: referenceVcfPrep_bcftools {
                container = "containers/bcftools-1.10.2.simg"
                cpus = params.cpus ?: 8
                memory = params.memory ?: 256.MB
                time = 13.h
            }
            withName: mergeCohortAndReferenceVcf_bcftools {
                container = "containers/bcftools-1.10.2.simg"
                cpus = params.cpus ?: 8
                memory = params.memory ?: { 256.MB * task.attempt }
                time = { 13.h * task.attempt }
            }
            withName: hardFilterCohortReferenceMergedVcf_vcftools {
                container = "containers/vcftools-0.1.16.simg"
                cpus = params.cpus ?: 1
                memory = params.memory ?: { 256.MB * task.attempt }
                time = { 13.h * task.attempt }
            }
            withName: filterPlinkFilesForAdmixture_plink {
                container = "containers/plink-1.90.simg"
                cpus = params.cpus ?: 8
                memory = params.memory ?: { 2.GB * task.attempt }
                time = { 13.h * task.attempt }
            }
            withName: ancestryEstimation_admixture {
                container = "containers/admixture-1.3.0.simg"
                cpus = params.cpus ?: 8
                memory = params.memory ?: { 4.GB * task.attempt }
                time = { 36.h * task.attempt }
            }
        }
    }

    // Profile for Somatic Variant Analysis step of pipeline using Slurm executor
    somatic {

        singularity.enabled = true
        singularity.autoMounts = true

        // Set the Singularity module if one was provided as input parameter
        if( params.singularity_module ) {
            process.module = "${params.singularity_module}"
        }

        process.executor = 'slurm'
        process.clusterOptions = '--ntasks-per-node=1'

        executor.queueSize = 100
        executor.queueStatInterval = '3 min'
        executor.exitReadTimeout = '60 min'
        executor.submitRateLimit = '10 sec'

        process {

            errorStrategy = { sleep(Math.pow(2, task.attempt) * 200 as long); return 'retry' }
            maxRetries = 3

            withName: identifySampleSex_allelecount {
                container = "containers/allelecount-4.2.1.simg"
                cpus = params.cpus ?: 1
                memory = params.memory ?: { 256.MB * task.attempt }
                time = { 13.h * task.attempt }
            }
            withName: telomereEstimation_telomerehunter {
                container = "containers/telomerehunter-1.1.0.simg"
                cpus = params.cpus ?: 4
                memory = params.memory ?: { 6.GB * task.attempt }
                time = { 13.h * task.attempt }
            }
            withName: bamPileupForConpair_conpair {
                container = "containers/conpair-0.2.simg"
                cpus = params.cpus ?: 1
                memory = params.memory ?: { 1.GB * task.attempt }
                time = { 13.h * task.attempt }
            }
            withName: concordanceAndContaminationEstimation_conpair {
                container = "containers/conpair-0.2.simg"
                cpus = params.cpus ?: 1
                memory = params.memory ?: { 1.GB * task.attempt }
                time = { 13.h * task.attempt }
            }
            withName: snvAndIndelCalling_varscan {
                container = "containers/varscan-2.3.9-samtools-1.11.simg"
                cpus = params.cpus ?: 1
                memory = params.memory ?: { 8.GB * task.attempt }
                time = { 13.h * task.attempt }
            }
            withName: concatenateVarscanPerChromosomeVcfs_bcftools {
                container = "containers/bcftools-1.10.2.simg"
                cpus = params.cpus ?: 8
                memory = params.memory ?: 256.MB
                time = 13.h
            }
            withName: filterRawSnvAndIndels_varscan {
                container = "containers/varscan-2.3.9-samtools-1.11.simg"
                cpus = params.cpus ?: 1
                memory = params.memory ?: { 8.GB * task.attempt }
                time = { 13.h * task.attempt }
            }
            withName: bamReadcountForVarscanFpFilter_bamreadcount {
                container = "containers/bam-readcount-0.8.simg"
                cpus = params.cpus ?: 8
                memory = params.memory ?: { 8.GB * task.attempt }
                time = { 13.h * task.attempt }
            }
            withName: falsePositivefilterSnvAndIndels_varscan {
                container = "containers/varscan-2.3.9-samtools-1.11.simg"
                cpus = params.cpus ?: 1
                memory = params.memory ?: { 8.GB * task.attempt }
                time = { 13.h * task.attempt }
            }
            withName: splitMultiallelicAndLeftNormalizeVarscanVcf_bcftools {
                container = "containers/bcftools-1.10.2.simg"
                cpus = params.cpus ?: 8
                memory = params.memory ?: { 256.MB * task.attempt }
                time = { 13.h * task.attempt }
            }
            withName: mutect2GnomadReferenceVcfPrep_bcftools {
                container = "containers/bcftools-1.10.2.simg"
                cpus = params.cpus ?: 8
                memory = params.memory ?: 256.MB
                time = 13.h
            }
            withName: snvAndIndelCalling_gatk {
                container = "containers/gatk-4.1.7.0.simg"
                cpus = params.cpus ?: 4
                memory = params.memory ?: { 12.GB * task.attempt }
                time = { 13.h * task.attempt }
            }
            withName: mergeAndSortMutect2Vcfs_gatk {
                container = "containers/gatk-4.1.7.0.simg"
                cpus = params.cpus ?: 1
                memory = params.memory ?: { 12.GB * task.attempt }
                time = { 13.h * task.attempt }
            }
            withName: mergeMutect2StatsForFiltering_gatk {
                container = "containers/gatk-4.1.7.0.simg"
                cpus = params.cpus ?: 1
                memory = params.memory ?: { 12.GB * task.attempt }
                time = { 13.h * task.attempt }
            }
            withName: pileupSummariesForMutect2Contamination_gatk {
                container = "containers/gatk-4.1.7.0.simg"
                cpus = params.cpus ?: 1
                memory = params.memory ?: { 12.GB * task.attempt }
                time = { 13.h * task.attempt }
            }
            withName: gatherTumorPileupSummariesForMutect2Contamination_gatk {
                container = "containers/gatk-4.1.7.0.simg"
                cpus = params.cpus ?: 1
                memory = params.memory ?: { 12.GB * task.attempt }
                time = { 13.h * task.attempt }
            }
            withName: gatherNormalPileupSummariesForMutect2Contamination_gatk {
                container = "containers/gatk-4.1.7.0.simg"
                cpus = params.cpus ?: 1
                memory = params.memory ?: { 12.GB * task.attempt }
                time = { 13.h * task.attempt }
            }
            withName: mutect2ContaminationCalculation_gatk {
                container = "containers/gatk-4.1.7.0.simg"
                cpus = params.cpus ?: 1
                memory = params.memory ?: { 12.GB * task.attempt }
                time = { 13.h * task.attempt }
            }
            withName: mutect2VariantFiltration_gatk {
                container = "containers/gatk-4.1.7.0.simg"
                cpus = params.cpus ?: 1
                memory = params.memory ?: { 12.GB * task.attempt }
                time = { 13.h * task.attempt }
            }
            withName: splitMultiallelicAndLeftNormalizeMutect2Vcf_bcftools {
                container = "containers/bcftools-1.10.2.simg"
                cpus = params.cpus ?: 8
                memory = params.memory ?: { 256.MB * task.attempt }
                time = { 13.h * task.attempt }
            }
            withName: splitMutectSnvsAndIndelsForConsensus_bcftools {
                container = "containers/bcftools-1.10.2.simg"
                cpus = params.cpus ?: 8
                memory = params.memory ?: { 256.MB * task.attempt }
                time = { 13.h * task.attempt }
            }
            withName: cnvCalling_ascatngs {
                container = "containers/ascatngs-4.5.0.simg"
                cpus = params.cpus ?: 4
                memory = params.memory ?: { 12.GB * task.attempt }
                time = { 13.h * task.attempt }
            }
            withName: bamMpileupForControlFreec_samtools {
                container = "containers/control-freec-11.6.simg"
                cpus = params.cpus ?: 1
                memory = params.memory ?: { 4.GB * task.attempt }
                time = { 13.h * task.attempt }
            }
            withName: mergeMpileupsForControlFreec_samtools {
                container = "containers/control-freec-11.6.simg"
                cpus = params.cpus ?: 1
                memory = params.memory ?: { 8.GB * task.attempt }
                time = { 13.h * task.attempt }
            }
            withName: cnvCalling_controlfreec {
                container = "containers/control-freec-11.6.simg"
                cpus = params.cpus ?: 8
                memory = params.memory ?: { 12.GB * task.attempt }
                time = { 13.h * task.attempt }
            }
            withName: cnvPredictionPostProcessing_controlfreec {
                container = "containers/control-freec-11.6.simg"
                cpus = params.cpus ?: 1
                memory = params.memory ?: { 4.GB * task.attempt }
                time = { 13.h * task.attempt }
            }
            withName: bamprocessPerChromosome_sclust {
                container = "containers/sclust-1.1.simg"
                cpus = params.cpus ?: 1
                memory = params.memory ?: { 4.GB * task.attempt }
                time = { 13.h * task.attempt }
            }
            withName: mergeBamprocessData_sclust {
                container = "containers/sclust-1.1.simg"
                cpus = params.cpus ?: 1
                memory = params.memory ?: { 8.GB * task.attempt }
                time = { 13.h * task.attempt }
            }
            withName: prepareVcfForSclust_vcftools {
                container = "containers/vcftools-0.1.16.simg"
                cpus = params.cpus ?: 1
                memory = params.memory ?: { 4.GB * task.attempt }
                time = { 13.h * task.attempt }
            }
            withName: cnvCalling_sclust {
                container = "containers/sclust-1.1.simg"
                cpus = params.cpus ?: 1
                memory = params.memory ?: { 16.GB * task.attempt }
                time = { 13.h * task.attempt }
            }
            withName: svAndIndelCalling_manta {
                container = "containers/manta-1.6.0.simg"
                cpus = params.cpus ?: 8
                memory = params.memory ?: { 12.GB * task.attempt }
                time = { 13.h * task.attempt }
            }
            withName: snvAndIndelCalling_strelka {
                container = "containers/strelka-2.9.10.simg"
                cpus = params.cpus ?: 8
                memory = params.memory ?: { 18.GB * task.attempt }
                time = { 24.h * task.attempt }
            }
            withName: splitMultiallelicAndLeftNormalizeStrelkaVcf_bcftools {
                container = "containers/bcftools-1.10.2.simg"
                cpus = params.cpus ?: 8
                memory = params.memory ?: { 256.MB * task.attempt }
                time = { 13.h * task.attempt }
            }
            withName: setupAndSplit_caveman {
                container = "containers/caveman-1.15.1.simg"
                cpus = params.cpus ?: 1
                memory = params.memory ?: { 6.GB * task.attempt }
                time = { 13.h * task.attempt }
            }
            withName: mstepPerChromosome_caveman {
                container = "containers/caveman-1.15.1.simg"
                cpus = params.cpus ?: 1
                memory = params.memory ?: { 10.GB * task.attempt }
                time = { 13.h * task.attempt }
            }
            withName: merge_caveman {
                container = "containers/caveman-1.15.1.simg"
                cpus = params.cpus ?: 1
                memory = params.memory ?: { 6.GB * task.attempt }
                time = { 13.h * task.attempt }
            }
            withName: snvCallingPerChromosome_caveman {
                container = "containers/caveman-1.15.1.simg"
                cpus = params.cpus ?: 1
                memory = params.memory ?: { 10.GB * task.attempt }
                time = { 48.h * task.attempt }
            }
            withName: mergeCavemanResults_caveman {
                container = "containers/caveman-1.15.1.simg"
                cpus = params.cpus ?: 1
                memory = params.memory ?: { 6.GB * task.attempt }
                time = { 13.h * task.attempt }
            }
            withName: prepGermlineBedForCavemanPostprocessing_bedops {
                container = "containers/bedops-2.4.39.simg"
                cpus = params.cpus ?: 1
                memory = params.memory ?: { 6.GB * task.attempt }
                time = { 13.h * task.attempt }
            }
            withName: vcfFlagging_cgpcavemanpostprocessing {
                container = "containers/cgp-cavemanpostprocessing-1.8.7.simg"
                cpus = params.cpus ?: 1
                memory = params.memory ?: { 6.GB * task.attempt }
                time = { 48.h * task.attempt }
            }
            withName: svAndIndelCalling_svaba {
                container = "containers/svaba-1.1.3.simg"
                cpus = params.cpus ?: 8
                memory = params.memory ?: { 12.GB * task.attempt }
                time = { 13.h * task.attempt }
            }
            withName: leftNormalizeSvabaVcf_bcftools {
                container = "containers/bcftools-1.10.2.simg"
                cpus = params.cpus ?: 8
                memory = params.memory ?: { 256.MB * task.attempt }
                time = { 13.h * task.attempt }
            }
            withName: setupreference_gridss {
                container = "containers/gridss-2.11.1.simg"
                cpus = params.cpus ?: 1
                memory = params.memory ?: { 10.GB * task.attempt }
                time = { 13.h * task.attempt }
            }
            withName: preprocess_gridss {
                container = "containers/gridss-2.11.1.simg"
                cpus = params.cpus ?: 8
                memory = params.memory ?: { 18.GB * task.attempt }
                time = { 13.h * task.attempt }
            }
            withName: assemble_gridss {
                container = "containers/gridss-2.11.1.simg"
                cpus = params.cpus ?: 4
                memory = params.memory ?: { 64.GB * task.attempt }
                time = { 13.h * task.attempt }
            }
            withName: mergeAssembly_gridss {
                container = "containers/gridss-2.11.1.simg"
                cpus = params.cpus ?: 4
                memory = params.memory ?: { 64.GB * task.attempt }
                time = { 13.h * task.attempt }
            }
            withName: svAndIndelCalling_gridss {
                container = "containers/gridss-2.11.1.simg"
                cpus = params.cpus ?: 4
                memory = params.memory ?: { 36.GB * task.attempt }
                time = { 13.h * task.attempt }
            }
            withName: filteringAndPostprocessesing_gridss {
                container = "containers/gridss-2.11.1.simg"
                cpus = params.cpus ?: 8
                memory = params.memory ?: { 8.GB * task.attempt }
                time = { 13.h * task.attempt }
            }
            withName: mergeAndGenerateConsensusSnvCalls_mergevcf {
                container = "containers/mergevcf-0.2.simg"
                cpus = params.cpus ?: 1
                memory = params.memory ?: { 4.GB * task.attempt }
                time = { 13.h * task.attempt }
            }
            withName: mergeAndGenerateConsensusIndelCalls_mergevcf {
                container = "containers/mergevcf-0.2.simg"
                cpus = params.cpus ?: 1
                memory = params.memory ?: { 4.GB * task.attempt }
                time = { 13.h * task.attempt }
            }
            withName: consensusIndelMpileup_bcftools {
                container = "containers/bcftools-1.10.2.simg"
                cpus = params.cpus ?: 8
                memory = params.memory ?: { 6.GB * task.attempt }
                time = { 13.h * task.attempt }
            }
            withName: addSamplesToConsensusIndelVcf_vatools {
                container = "containers/vcftools-0.1.16.simg"
                cpus = params.cpus ?: 1
                memory = params.memory ?: { 4.GB * task.attempt }
                time = { 13.h * task.attempt }
            }
            withName: annotateConsensusIndelVcfFormatColumnAndFilter_bcftools {
                container = "containers/bcftools-1.10.2.simg"
                cpus = params.cpus ?: 1
                memory = params.memory ?: { 6.GB * task.attempt }
                time = { 13.h * task.attempt }
            }
            withName: consensusSnvMpileup_bcftools {
                container = "containers/bcftools-1.10.2.simg"
                cpus = params.cpus ?: 8
                memory = params.memory ?: { 6.GB * task.attempt }
                time = { 13.h * task.attempt }
            }
            withName: addSamplesToConsensusSnvVcf_vatools {
                container = "containers/vcftools-0.1.16.simg"
                cpus = params.cpus ?: 1
                memory = params.memory ?: { 4.GB * task.attempt }
                time = { 13.h * task.attempt }
            }
            withName: annotateConsensusSnvVcfFormatColumnAndFilter_bcftools {
                container = "containers/bcftools-1.10.2.simg"
                cpus = params.cpus ?: 1
                memory = params.memory ?: { 6.GB * task.attempt }
                time = { 13.h * task.attempt }
            }
            withName: downloadVepAnnotationReferences_vep {
                container = "containers/vep-101.0.simg"
                cpus = params.cpus ?: 1
                memory = params.memory ?: 256.MB
                time = 1.h
            }
            withName: annotateSomaticVcf_vep {
                container = "containers/vep-101.0.simg"
                cpus = params.cpus ?: 1
                memory = params.memory ?: { 4.GB * task.attempt }
                time = { 13.h * task.attempt }
            }
        }
    }
}