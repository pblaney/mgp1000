// #################################################### \\
// ~~~~~~~~~~~~~~~ SLURM CONFIGURATION ~~~~~~~~~~~~~~~~ \\

executor {
    name = 'slurm'
    queueSize = "${params.queue_size}"
    queueStatInterval = '3 min'
    exitReadTimeout = '60 min'
    submitRateLimit = '1sec'
}

// Profiles for individual modules of the MGP1000: Preprocessing, Germline, and Somatic
profiles {
	
	// ############################################ \\
	// ~~~~~~~~~~ PREPROCESSING PROFILE ~~~~~~~~~~~ \\
	preprocessing {
		singularity.enabled = true
        singularity.autoMounts = true

        process {
        	executor = 'slurm'
        	clusterOptions = '--ntasks-per-node=1'
        	errorStrategy = { task.exitStatus in [143,137,104,134,139,247,140,245] ? 'retry' : 'finish' }
        	maxRetries = 3

        	withName: mergeLaneSplitFastqs_mergelane {
                container = "containers/base.simg"
                cpus = 1
                memory = params.memory ?: { 1.GB * task.attempt }
                time = { 3.h * task.attempt }
            }
            withName: gatherInputFastqs_fastqgatherer {
                container = "containers/base.simg"
                cpus = 1
                memory = params.memory ?: { 256.MB * task.attempt }
                time = { 1.h * task.attempt }
            }
            withName: revertMappedBam_gatk {
                container = "containers/gatk-4.1.7.0.simg"
                cpus = 1
                memory = params.memory ?: { 18.GB * task.attempt }
                time = { 12.h * task.attempt + 36.h }
            }
            withName: bamToFastq_biobambam {
                container = "containers/biobambam-2.0.87.simg"
                cpus = 1
                memory = params.memory ?: { 256.MB * task.attempt }
                time = { 12.h * task.attempt + 48.h }
            }
            withName: fastqTrimming_trimmomatic {
                container = "containers/trimmomatic-0.36.simg"
                cpus = params.cpus ?: 12
                memory = params.memory ?: { 1.GB * task.attempt + 1.GB * task.cpus }
                time = { 12.h * task.attempt + 24.h }
            }
            withName: fastqQualityControlMetrics_fastqc {
                container = "containers/fastqc-0.11.9.simg"
                cpus = 1
                memory = params.memory ?: { 4.GB * task.attempt }
                time = { 13.h * task.attempt }
                errorStrategy = { sleep(Math.pow(2, task.attempt) * 200 as long); return 'retry' }
            }
            withName: alignment_bwa {
                container = "containers/bwa-0.7.17-sambamba-0.7.1.simg"
                cpus = params.cpus ?: 17
                memory = params.memory ?: { 24.GB * task.attempt + 6.GB * task.cpus }
                time = { 12.h * task.attempt + 48.h }
                errorStrategy = { sleep(Math.pow(2, task.attempt) * 200 as long); return 'retry' }
            }
            withName: postAlignmentFlagstats_sambamba {
                container = "containers/sambamba-0.7.1.simg"
                cpus = params.cpus ?: 4
                memory = params.memory ?: { 1.GB * task.attempt + 1.GB * task.cpus }
                time = { 2.h * task.attempt }
            }
            withName: fixMateInformationAndSort_gatk {
                container = "containers/gatk-4.1.7.0.simg"
                cpus = 2
                memory = params.memory ?: { 24.GB * task.attempt + 8.GB * task.cpus }
                time = { 24.h * task.attempt + 24.h }
                errorStrategy = { sleep(Math.pow(2, task.attempt) * 200 as long); return 'retry' }
            }
            withName: markDuplicatesAndIndex_sambamba {
                container = "containers/sambamba-0.7.1.simg"
                cpus = params.cpus ?: 4
                memory = params.memory ?: { 8.GB * task.attempt + 4.GB * task.cpus }
                time = { 12.h * task.attempt + 12.h }
                errorStrategy = { sleep(Math.pow(2, task.attempt) * 200 as long); return 'retry' }
            }
            withName: localAndGlobalRealignment_abra2 {
                container = "containers/abra-2.23.simg"
                cpus = 6
                memory = params.memory ?: { 4.GB * task.attempt + 2.GB * task.cpus }
                time = { 6.h * task.attempt + 8.h }
            }
            withName: downsampleBam_gatk {
                container = "containers/gatk-4.1.7.0.simg"
                cpus = 2
                memory = params.memory ?: { 4.GB * task.attempt + 8.GB * task.cpus }
                time = { 6.h * task.attempt + 8.h }
            }
            withName: baseRecalibrator_gatk {
                container = "containers/gatk-4.1.7.0.simg"
                cpus = 1
                memory = params.memory ?: { 8.GB * task.attempt }
                time = { 6.h * task.attempt + 8.h }
            }
            withName: applyBqsr_gatk {
                container = "containers/gatk-4.1.7.0.simg"
                cpus = 2
                memory = params.memory ?: { 4.GB * task.attempt + 4.GB * task.cpus }
                time = { 6.h * task.attempt + 8.h }
            }
            withName: collectWgsMetrics_gatk {
                container = "containers/gatk-4.1.7.0.simg"
                cpus = 1
                memory = params.memory ?: { 12.GB * task.attempt }
                time = { 6.h * task.attempt + 8.h }
            }
            withName: collectGcBiasMetrics_gatk {
                container = "containers/gatk-4.1.7.0.simg"
                cpus = 1
                memory = params.memory ?: { 12.GB * task.attempt }
                time = { 6.h * task.attempt + 8.h }
            }
            withName: collectHsMetrics_gatk {
                container = "containers/gatk-4.1.7.0.simg"
                cpus = 1
                memory = params.memory ?: { 12.GB * task.attempt }
                time = { 6.h * task.attempt + 8.h }
            }
        }
	}

	// ############################################ \\
	// ~~~~~~~~~~~~~ GERMLINE PROFILE ~~~~~~~~~~~~~ \\
	germline {
		singularity.enabled = true
        singularity.autoMounts = true

        process {
        	executor = 'slurm'
        	clusterOptions = '--ntasks-per-node=1'
        	errorStrategy = { task.exitStatus in [143,137,104,134,139,247,140,245] ? 'retry' : 'finish' }
        	maxRetries = 2

            withName: snpAndIndelCalling_deepvariant {
                container = "containers/deepvariant-1.5.0.simg"
                cpus = params.cpus ?: 8
                memory = params.memory ?: { 8.GB + 2.GB * task.cpus }
                time = { 3.h * task.attempt }
            }
            withName: mergeAndSortVcfs_gatk {
                container = "containers/gatk-4.1.7.0.simg"
                cpus = 1
                memory = params.memory ?: 8.GB
                time = { 30.m * task.attempt }
            }
            withName: variantFilter_gatk {
                container = "containers/gatk-4.1.7.0.simg"
                cpus = 1
                memory = params.memory ?: 12.GB
                time = { 30.m * task.attempt }
            }
            withName: alleleFrequencyEstimation_angsd {
                container = "containers/angsd-0.941.simg"
                cpus = params.cpus ?: 2
                memory = params.memory ?: { 32.GB + 8.GB * task.cpus }
                time = { 24.h * task.attempt }
            }
            withName: ancestryEstimation_fastngsadmix {
                container = "containers/fastngsadmix-1.0.simg"
                cpus = 1
                memory = params.memory ?: 8.GB
                time = { 24.h * task.attempt }
            }
        }
	}

	// ############################################ \\
	// ~~~~~~~~~~~~~~ SOMATIC PROFILE ~~~~~~~~~~~~~ \\
	somatic {
		singularity.enabled = true
        singularity.autoMounts = true

        process {
        	executor = 'slurm'
        	clusterOptions = '--ntasks-per-node=1'
        	errorStrategy = { task.exitStatus in [143,137,104,134,139,247,140,135,245] ? 'retry' : 'finish' }
        	maxRetries = 2

            withName: identifySampleSex_allelecount {
                container = "containers/allelecount-4.2.1.simg"
                cpus = 1
                memory = params.memory ?: { 256.MB * task.attempt }
                time = { 1.h * task.attempt }
            }
            withName: downloadBattenbergReferences_battenberg {
                container = "containers/base.simg"
                cpus = 1
                memory = 8.GB
                time = 24.h
            }
            withName: cnvCalling_battenberg {
                container = "containers/battenberg-2.2.9.simg"
                cpus = params.cpus ?: 6
                memory = params.memory ?: { 72.GB * task.attempt + 8.GB * task.cpus }
                time = { 56.h * task.attempt }
            }
            withName: fitCnvProfileExtract_devgru {
                container = "containers/devgru-0.0.0.9000.simg"
                cpus = params.cpus ?: 12
                memory = params.memory ?: { 34.GB * task.attempt }
                time = { 3.h * task.attempt }
            }
            withName: consensusCnvPrep_battenberg {
                container = "containers/bedtools-2.30.0.simg"
                cpus = 1
                memory = params.memory ?: { 256.MB * task.attempt }
                time = { 1.h * task.attempt }
            }
            withName: snpPileup_facets {
                container = "containers/iarc-facets-2.0.simg"
                cpus = 1
                memory = params.memory ?: { 8.GB * task.attempt }
                time = { 6.h * task.attempt + 8.h }
            }
            withName: cnvCalling_facets {
                container = "containers/iarc-facets-2.0.simg"
                cpus = 1
                memory = params.memory ?: { 28.GB * task.attempt }
                time = { 4.h * task.attempt }
            }
            withName: consensusCnvPrep_facets {
                container = "containers/iarc-facets-2.0.simg"
                cpus = 1
                memory = params.memory ?: { 256.MB * task.attempt }
                time = { 1.h * task.attempt }
            }
            withName: svAndIndelCalling_manta {
                container = "containers/manta-1.6.0.simg"
                cpus = params.cpus ?: 12
                memory = params.memory ?: { 2.GB * task.attempt + 1.GB * task.cpus }
                time = { 6.h * task.attempt + 8.h }
            }
            withName: filterAndPostprocessMantaVcf_bcftools {
                container = "containers/bcftools-1.10.2.simg"
                cpus = 1
                memory = params.memory ?: { 256.MB * task.attempt }
                time = { 3.h * task.attempt }
            }
            withName: falsePostiveSvFilteringManta_duphold {
                container = "containers/duphold-0.2.3.simg"
                cpus = params.cpus ?: 4
                memory = 4.GB
                time = 3.h
            }
            withName: snvAndIndelCalling_strelka {
                container = "containers/strelka-2.9.10.simg"
                cpus = params.cpus ?: 8
                memory = params.memory ?: { 2.GB * task.attempt + 2.GB * task.cpus }
                time = { 6.h * task.attempt + 8.h }
            }
            withName: splitMultiallelicAndLeftNormalizeStrelkaVcf_bcftools {
                container = "containers/bcftools-1.10.2.simg"
                cpus = params.cpus ?: 4
                memory = params.memory ?: { 256.MB * task.attempt }
                time = { 3.h * task.attempt }
            }
            withName: svAndIndelCalling_svaba {
                container = "containers/svaba-1.1.3.simg"
                cpus = params.cpus ?: 16
                memory = params.memory ?: { 2.GB * task.attempt + 1.GB * task.cpus }
                time = { 12.h * task.attempt + 16.h }
            }
            withName: filterAndPostprocessSvabaVcf_bcftools {
                container = "containers/bcftools-1.10.2.simg"
                cpus = 1
                memory = params.memory ?: { 256.MB * task.attempt }
                time = { 3.h * task.attempt }
            }
            withName: leftNormalizeSvabaVcf_bcftools {
                container = "containers/bcftools-1.10.2.simg"
                cpus = params.cpus ?: 4
                memory = params.memory ?: { 256.MB * task.attempt }
                time = { 3.h * task.attempt }
            }
            withName: falsePostiveSvFilteringSvaba_duphold {
                container = "containers/duphold-0.2.3.simg"
                cpus = params.cpus ?: 4
                memory = params.memory ?: { 4.GB * task.attempt }
                time = { 3.h * task.attempt }
            }
            withName: svAndIndelCalling_delly {
                container = "containers/delly-1.1.6.simg"
                cpus = params.cpus ?: 2
                memory = params.memory ?: { 2.GB * task.attempt + 8.GB * task.cpus }
                time = { 36.h * task.attempt }
            }
            withName: filterAndPostprocessDellyVcf_bcftools {
                container = "containers/bcftools-1.10.2.simg"
                cpus = 1
                memory = params.memory ?: { 256.MB * task.attempt }
                time = { 3.h * task.attempt }
            }
            withName: falsePostiveSvFilteringDelly_duphold {
                container = "containers/duphold-0.2.3.simg"
                cpus = params.cpus ?: 4
                memory = params.memory ?: { 4.GB * task.attempt }
                time = { 3.h * task.attempt }
            }
            withName: igRearrangementsAndTranslocations_igcaller {
                container = "containers/igcaller-1.2.1.simg"
                cpus = 1
                memory = params.memory ?: { 2.GB * task.attempt + 8.GB }
                time = { 6.h * task.attempt + 8.h }
            }
            withName: snvAndIndelCalling_varscan {
                container = "containers/varscan-2.3.9-samtools-1.11.simg"
                cpus = 1
                memory = params.memory ?: { 12.GB * task.attempt }
                time = { 6.h * task.attempt + 8.h }
            }
            withName: concatenateVarscanPerChromosomeVcfs_bcftools {
                container = "containers/bcftools-1.10.2.simg"
                cpus = params.cpus ?: 4
                memory = params.memory ?: { 256.MB * task.attempt }
                time = { 1.h * task.attempt }
            }
            withName: filterRawSnvAndIndels_varscan {
                container = "containers/varscan-2.3.9-samtools-1.11.simg"
                cpus = 1
                memory = params.memory ?: { 8.GB * task.attempt }
                time = { 3.h * task.attempt }
            }
            withName: bamReadcountForVarscanFpFilter_bamreadcount {
                container = "containers/bam-readcount-0.8.simg"
                cpus = params.cpus ?: 2
                memory = params.memory ?: { 2.GB * task.attempt + 3.GB * task.cpus }
                time = { 4.h * task.attempt }
            }
            withName: falsePositivefilterSnvAndIndels_varscan {
                container = "containers/varscan-2.3.9-samtools-1.11.simg"
                cpus = 1
                memory = params.memory ?: { 12.GB * task.attempt }
                time = { 8.h * task.attempt }
            }
            withName: splitMultiallelicAndLeftNormalizeVarscanVcf_bcftools {
                container = "containers/bcftools-1.10.2.simg"
                cpus = params.cpus ?: 4
                memory = params.memory ?: { 256.MB * task.attempt }
                time = { 1.h * task.attempt }
            }
            withName: mutect2GnomadReferenceVcfPrep_bcftools {
                container = "containers/bcftools-1.10.2.simg"
                cpus = params.cpus ?: 4
                memory = params.memory ?: 2.GB
                time = 13.h
            }
            withName: snvAndIndelCalling_gatk {
                container = "containers/gatk-4.1.7.0.simg"
                cpus = params.cpus ?: 2
                memory = params.memory ?: { 2.GB * task.attempt + 4.GB * task.cpus }
                time = { 6.h * task.attempt + 8.h }
            }
            withName: mergeAndSortMutect2Vcfs_gatk {
                container = "containers/gatk-4.1.7.0.simg"
                cpus = 1
                memory = params.memory ?: { 12.GB * task.attempt }
                time = { 3.h * task.attempt }
            }
            withName: mergeMutect2StatsForFiltering_gatk {
                container = "containers/gatk-4.1.7.0.simg"
                cpus = 1
                memory = params.memory ?: { 12.GB * task.attempt }
                time = { 3.h * task.attempt }
            }
            withName: pileupSummariesForMutect2Contamination_gatk {
                container = "containers/gatk-4.1.7.0.simg"
                cpus = 1
                memory = params.memory ?: { 12.GB * task.attempt }
                time = { 3.h * task.attempt }
            }
            withName: gatherTumorPileupSummariesForMutect2Contamination_gatk {
                container = "containers/gatk-4.1.7.0.simg"
                cpus = 1
                memory = params.memory ?: { 12.GB * task.attempt }
                time = { 1.h * task.attempt }
            }
            withName: gatherNormalPileupSummariesForMutect2Contamination_gatk {
                container = "containers/gatk-4.1.7.0.simg"
                cpus = 1
                memory = params.memory ?: { 12.GB * task.attempt }
                time = { 1.h * task.attempt }
            }
            withName: mutect2ContaminationCalculation_gatk {
                container = "containers/gatk-4.1.7.0.simg"
                cpus = 1
                memory = params.memory ?: { 12.GB * task.attempt }
                time = { 1.h * task.attempt }
            }
            withName: mutect2VariantFiltration_gatk {
                container = "containers/gatk-4.1.7.0.simg"
                cpus = 1
                memory = params.memory ?: { 12.GB * task.attempt }
                time = { 6.h * task.attempt + 8.h }
            }
            withName: splitMultiallelicAndLeftNormalizeMutect2Vcf_bcftools {
                container = "containers/bcftools-1.10.2.simg"
                cpus = params.cpus ?: 4
                memory = params.memory ?: { 256.MB * task.attempt }
                time = { 1.h * task.attempt }
            }
            withName: splitMutectSnvsAndIndelsForConsensus_bcftools {
                container = "containers/bcftools-1.10.2.simg"
                cpus = params.cpus ?: 4
                memory = params.memory ?: { 256.MB * task.attempt }
                time = { 1.h * task.attempt }
            }
            withName: bamPileupForConpair_conpair {
                container = "containers/conpair-0.2.simg"
                cpus = 1
                memory = params.memory ?: { 1.GB * task.attempt }
                time = { 1.h * task.attempt }
            }
            withName: concordanceAndContaminationEstimation_conpair {
                container = "containers/conpair-0.2.simg"
                cpus = 1
                memory = params.memory ?: { 1.GB * task.attempt }
                time = { 1.h * task.attempt }
            }
            withName: prepGermlineBedForCaveman_bedops {
                container = "containers/bedops-2.4.39.simg"
                cpus = 1
                memory = params.memory ?: 256.MB
                time = { 1.h * task.attempt }
            }
            withName: setup_caveman {
                container = "containers/cgp-caveman-1.18.3.simg"
                cpus = 1
                memory = params.memory ?: 256.MB
                time = { 1.h * task.attempt }
            }
            withName: split_caveman {
                container = "containers/cgp-caveman-1.18.3.simg"
                cpus = 1
                memory = params.memory ?: 8.GB
                time = { 2.h * task.attempt }
            }
            withName: splitConcat_caveman {
                container = "containers/cgp-caveman-1.18.3.simg"
                cpus = 1
                memory = params.memory ?: 1.GB
                time = { 1.h * task.attempt }
            }
            withName: mstep_caveman {
                container = "containers/cgp-caveman-1.18.3.simg"
                cpus = 1
                memory = params.memory ?: { 16.GB + 20.GB * task.attempt }
                time = { 1.h * task.attempt }
            }
            withName: merge_caveman {
                container = "containers/cgp-caveman-1.18.3.simg"
                cpus = 1
                memory = params.memory ?: 256.MB
                time = { 1.h * task.attempt }
            }
            withName: snvCalling_caveman {
                container = "containers/cgp-caveman-1.18.3.simg"
                cpus = 1
                memory = params.memory ?: { 16.GB + 20.GB * task.attempt }
                time = { 1.h * task.attempt }
            }
            withName: flag_caveman {
                container = "containers/cgp-caveman-1.18.3.simg"
                cpus = 1
                memory = params.memory ?: { 1.GB * task.attempt }
                time = { 1.h * task.attempt }
            }
            withName: mergeResults_caveman {
                container = "containers/cgp-caveman-1.18.3.simg"
                cpus = 1
                memory = params.memory ?: 256.MB
                time = { 3.h * task.attempt }
            }
            withName: unionAndConsensusSnvCalls_devgru {
                container = "containers/devgru-0.0.0.9000.simg"
                cpus = params.cpus ?: 8
                memory = { 16.GB + 20.GB * task.attempt }
                time = { 1.h * task.attempt }
            }
            withName: unionAndConsensusIndelCalls_devgru {
                container = "containers/devgru-0.0.0.9000.simg"
                cpus = params.cpus ?: 8
                memory = { 16.GB + 20.GB * task.attempt }
                time = { 1.h * task.attempt }
            }
            withName: twoWayMergeAndGenerateConsensusCnvCalls_bedtools {
                container = "containers/bedtools-2.30.0.simg"
                cpus = 1
                memory = params.memory ?: 1.GB
                time = { 1.h * task.attempt }
            }
            withName: mergeAndGenerateConsensusSvCalls_ggnome {
                container = "containers/ggnome-1.1.simg"
                cpus = 1
                memory = params.memory ?: 12.GB
                time = { 2.h * task.attempt }
            }
            withName: binReadCoverageInNormal_fragcounter {
                container = "containers/fragcounter-0.0.0.9000.simg"
                cpus = 1
                memory = params.memory ?: { 20.GB * task.attempt }
                time = { 6.h * task.attempt + 8.h }
            }
            withName: binReadCoverageInTumor_fragcounter {
                container = "containers/fragcounter-0.0.0.9000.simg"
                cpus = 1
                memory = params.memory ?: { 20.GB * task.attempt }
                time = { 6.h * task.attempt + 8.h }
            }
            withName: snpPileup_fragcounter {
                container = "containers/iarc-facets-2.0.simg"
                cpus = 1
                memory = params.memory ?: { 8.GB * task.attempt }
                time = { 14.h * task.attempt }
            }
            withName: telomereLengthEstimation_telomerecat {
                container = "containers/telomerecat-3.4.0.simg"
                cpus = params.cpus ?: 8
                memory = params.memory ?: { 2.GB * task.attempt + 1.GB * task.cpus }
                time = { 6.h * task.attempt + 8.h }
            }
            withName: telomereEstimation_telomerehunter {
                container = "containers/telomerehunter-1.1.0.simg"
                cpus = params.cpus ?: 2
                memory = params.memory ?: { 2.GB * task.attempt + 1.GB * task.cpus }
                time = { 6.h * task.attempt + 8.h }
            }
        }
	}
}

// #################################################### \\
