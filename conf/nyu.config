// #################################################### \\
// ~~~~~~~~~~~~~~~ SLURM CONFIGURATION ~~~~~~~~~~~~~~~~ \\

executor {
    name = 'slurm'
    queueSize = "${params.queue_size}"
    queueStatInterval = '5 min'
    exitReadTimeout = '60 min'
    submitRateLimit = '10sec'
}

// Profiles for individual modules of the MGP1000: Preprocessing, Germline, and Somatic
profiles {
	
	// ############################################ \\
	// ~~~~~~~~~~ PREPROCESSING PROFILE ~~~~~~~~~~~ \\
	preprocessing {
		singularity.enabled = true
        singularity.autoMounts = true

        process {
        	executor = 'slurm'
        	clusterOptions = '--ntasks-per-node=1'
        	errorStrategy = 'ignore'

        	withName: mergeLaneSplitFastqs_mergelane {
                container = "containers/base-2.0.simg"
                cpus = 1
                memory = 2.GB
                time = 11.h
                errorStrategy = { task.exitStatus in [255] ? 'retry' : 'terminate' }
                maxRetries = 1
            }
            withName: gatherInputFastqs_fastqgatherer {
                container = "containers/base-2.0.simg"
                cpus = 1
                memory = 256.MB
                time = 3.h
                errorStrategy = { task.exitStatus in [255] ? 'retry' : 'terminate' }
                maxRetries = 1
            }
            withName: revertMappedBam_gatk {
                container = "containers/gatk-4.3.0.0.simg"
                cpus = 16
                memory = { 8.GB * task.cpus }
                time = { 48.h * task.attempt }
                errorStrategy = { task.exitStatus in [140,255] ? 'retry' : 'ignore' }
                maxRetries = 2
            }
            withName: bamToFastq_biobambam {
                container = "containers/mgpconda-1.0.simg"
                cpus = 1
                memory = { 4.GB * task.attempt }
                time = { 24.h + 24.h * task.attempt }
                errorStrategy = { task.exitStatus in [134,140,255] ? 'retry' : 'ignore' }
                maxRetries = 1
            }
            withName: fastqTrimming_trimmomatic {
                container = "containers/mgpconda-1.0.simg"
                cpus = 12
                memory = { 2.GB * task.cpus }
                time = 48.h
                errorStrategy = { task.exitStatus in [255] ? 'retry' : 'ignore' }
                maxRetries = 1
            }
            withName: fastqQualityControlMetrics_fastqc {
                container = "containers/mgpconda-1.0.simg"
                cpus = 1
                memory = { 4.GB * task.attempt }
                time = { 18.h * task.attempt }
                errorStrategy = { task.exitStatus in [140,255] ? 'retry' : 'ignore' }
                maxRetries = 1
            }
            withName: alignment_bwa {
                container = "containers/mgpcore-1.0.simg"
                cpus = 24
                memory = { 32.GB * task.attempt + 6.GB * task.cpus }
                time = { 48.h + 24.h * task.attempt }
                errorStrategy = { task.exitStatus in [140,255] ? 'retry' : 'ignore' }
                maxRetries = 1
            }
            withName: alignmentPostprocessing_samtools {
                container = "containers/mgpcore-1.0.simg"
                cpus = 24
                memory = { 6.GB * task.cpus * task.attempt }
                time = 16.h
                errorStrategy = { task.exitStatus in [140,255] ? 'retry' : 'ignore' }
                maxRetries = 1
            }
            withName: localAndGlobalRealignment_abra2 {
                container = "containers/mgpcore-1.0.simg"
                cpus = 16
                memory = { 4.GB + 2.GB * task.cpus }
                time = 24.h
            }
            withName: downsampleBam_gatk {
                container = "containers/gatk-4.3.0.0.simg"
                cpus = 2
                memory = { 6.GB + 8.GB * task.cpus }
                time = 24.h
            }
            withName: baseRecalibrator_gatk {
                container = "containers/gatk-4.3.0.0.simg"
                cpus = 16
                memory = { 6.GB + 4.GB * task.cpus }
                time = 16.h
            }
            withName: applyBqsr_gatk {
                container = "containers/gatk-4.3.0.0.simg"
                cpus = 16
                memory = { 6.GB + 4.GB * task.cpus }
                time = 16.h
            }
            withName: alignmentQualityControl_alfred {
                container = "containers/alfred-0.2.7.simg"
                cpus = 1
                memory = { 8.GB + 8.GB * task.attempt }
                time = { 8.h * task.attempt }
                errorStrategy = { task.exitStatus in [140,255] ? 'retry' : 'ignore' }
                maxRetries = 1
            }
        }
	}

	// ############################################ \\
	// ~~~~~~~~~~~~~ GERMLINE PROFILE ~~~~~~~~~~~~~ \\
	germline {
		singularity.enabled = true
        singularity.autoMounts = true

        process {
        	executor = 'slurm'
        	clusterOptions = '--ntasks-per-node=1'
        	errorStrategy = 'ignore'

        	withName: snpAndIndelCalling_deepvariant {
                container = "containers/deepvariant-1.5.0.simg"
                cpus = { 2 + 4 * task.attempt }
                memory = { 4.GB * task.attempt + 1.GB * task.cpus }
                time = { 3.h + 2.h * task.attempt }
                errorStrategy = 'retry'
                maxRetries = 1
            }
            withName: snpAndIndelCallingForPanel_deepvariant {
                container = "containers/deepvariant-1.5.0.simg"
                cpus = 6
                memory = { 4.GB * task.cpus }
                time = 6.h
            }
            withName: mergeAndSortVcfs_gatk {
                container = "containers/gatk-4.3.0.0.simg"
                cpus = 1
                memory = 8.GB
                time = 1.h
            }
            withName: variantFilter_gatk {
                container = "containers/gatk-4.3.0.0.simg"
                cpus = 1
                memory = 12.GB
                time = 1.h
            }
            withName: alleleFrequencyEstimation_angsd {
                container = "containers/angsd-0.941.simg"
                cpus = 2
                memory = { 32.GB + 8.GB * task.cpus }
                time = 24.h
            }
            withName: ancestryEstimation_fastngsadmix {
                container = "containers/mgpcore-1.0.simg"
                cpus = 1
                memory = 8.GB
                time = 24.h
            }
        }
	}

	// ############################################ \\
	// ~~~~~~~~~~~~~~ SOMATIC PROFILE ~~~~~~~~~~~~~ \\
	somatic {
		singularity.enabled = true
        singularity.autoMounts = true

        process {
        	executor = 'slurm'
        	clusterOptions = '--ntasks-per-node=1'
        	errorStrategy = 'ignore'

        	withName: identifySampleSex_allelecount {
                container = "containers/allelecount-4.2.1.simg"
                cpus = 1
                memory = 256.MB
                time = 30.m
                errorStrategy = { task.exitStatus in [127] ? 'retry' : 'ignore' }
                maxRetries = 1
            }
            withName: downloadBattenbergReferences_battenberg {
                container = "containers/base-2.0.simg"
                cpus = 1
                memory = 8.GB
                time = 14.h
                errorStrategy = { task.exitStatus in [127] ? 'retry' : 'ignore' }
                maxRetries = 1
            }
            withName: cnvCalling_battenberg {
                container = "containers/battenberg-2.2.9.simg"
                cpus = 6
                memory = { 80.GB * task.attempt + 10.GB * task.cpus }
                time = { 18.h * task.attempt }
                errorStrategy = 'retry'
                maxRetries = 1
            }
            withName: fitCnvProfileExtract_devgru {
                container = "containers/devgru-0.0.0.9000.simg"
                cpus = 12
                memory = { 8.GB + 6.GB * task.cpus }
                time = { 3.h * task.attempt }
                errorStrategy = { task.exitStatus in [127,140] ? 'retry' : 'ignore' }
                maxRetries = 1
            }
            withName: consensusCnvPrep_battenberg {
                container = "containers/mgpcore-1.0.simg"
                cpus = 1
                memory = 256.MB
                time = 30.m
                errorStrategy = { task.exitStatus in [127] ? 'retry' : 'ignore' }
                maxRetries = 1
            }
            withName: snpPileup_facets {
                container = "containers/iarc-facets-2.0.simg"
                cpus = 1
                memory = 14.GB
                time = 8.h
            }
            withName: cnvCalling_facets {
                container = "containers/iarc-facets-2.0.simg"
                cpus = 1
                memory = { 28.GB * task.attempt}
                time = 3.h
                errorStrategy = 'retry'
                maxRetries = 1
            }
            withName: consensusCnvPrep_facets {
                container = "containers/iarc-facets-2.0.simg"
                cpus = 1
                memory = 256.MB
                time = 30.m
                errorStrategy = { task.exitStatus in [127] ? 'retry' : 'ignore' }
                maxRetries = 1
            }
            withName: svAndIndelCalling_manta {
                container = "containers/manta-1.6.0.simg"
                cpus = 16
                memory = { 12.GB + 2.GB * task.cpus }
                time = { 14.h * task.attempt }
                errorStrategy = 'retry'
                maxRetries = 1
            }
            withName: filterAndPostprocessMantaVcf_bcftools {
                container = "containers/mgpcore-1.0.simg"
                cpus = 1
                memory = 256.MB
                time = 30.m
            }
            withName: falsePostiveSvFilteringManta_duphold {
                container = "containers/duphold-0.2.3.simg"
                cpus = 6
                memory = 6.GB
                time = 2.h
            }
            withName: snvAndIndelCalling_strelka {
                container = "containers/strelka-2.9.10.simg"
                cpus = 16
                memory = { 8.GB + 2.GB * task.cpus }
                time = 14.h
            }
            withName: splitMultiallelicAndLeftNormalizeStrelkaVcf_bcftools {
                container = "containers/mgpcore-1.0.simg"
                cpus = 4
                memory = 256.MB
                time = 3.h
            }
            withName: svAndIndelCalling_svaba {
                container = "containers/svaba-1.2.0.simg"
                cpus = 6
                memory = { 64.GB * task.attempt + 12.GB * task.cpus }
                time = { 24.h * task.attempt }
                errorStrategy = { task.exitStatus in [127,140,255] ? 'retry' : 'ignore' }
                maxRetries = 1
            }
            withName: filterAndPostprocessSvabaVcf_bcftools {
                container = "containers/mgpcore-1.0.simg"
                cpus = 1
                memory = 256.MB
                time = 30.m
            }
            withName: leftNormalizeSvabaVcf_bcftools {
                container = "containers/mgpcore-1.0.simg"
                cpus = 4
                memory = 256.MB
                time = 30.m
            }
            withName: falsePostiveSvFilteringSvaba_duphold {
                container = "containers/duphold-0.2.3.simg"
                cpus = 6
                memory = 6.GB
                time = 2.h
            }
            withName: svAndIndelCalling_delly {
                container = "containers/delly-1.1.6.simg"
                cpus = 2
                memory = { 18.GB + 8.GB * task.cpus }
                time = { 14.h * task.attempt }
                errorStrategy = 'retry'
                maxRetries = 1
            }
            withName: filterAndPostprocessDellyVcf_bcftools {
                container = "containers/mgpcore-1.0.simg"
                cpus = 1
                memory = 256.MB
                time = 30.m
            }
            withName: falsePostiveSvFilteringDelly_duphold {
                container = "containers/duphold-0.2.3.simg"
                cpus = 6
                memory = 6.GB
                time = 2.h
            }
            withName: igRearrangementsAndTranslocations_igcaller {
                container = "containers/igcaller-1.2.1.simg"
                cpus = 1
                memory = 20.GB
                time = { 5.h * task.attempt }
                errorStrategy = 'retry'
                maxRetries = 1
            }
            withName: snvAndIndelCalling_varscan {
                container = "containers/mgpcore-1.0.simg"
                cpus = 1
                memory = { 6.GB + 6.GB * task.attempt }
                time = 24.h
                errorStrategy = { task.exitStatus in [255] ? 'retry' : 'ignore' }
                maxRetries = 1
            }
            withName: concatenateVarscanPerChromosomeVcfs_bcftools {
                container = "containers/mgpcore-1.0.simg"
                cpus = 4
                memory = 256.MB
                time = 3.h
                errorStrategy = { task.exitStatus in [255] ? 'retry' : 'ignore' }
                maxRetries = 1
            }
            withName: filterRawSnvAndIndels_varscan {
                container = "containers/mgpcore-1.0.simg"
                cpus = 1
                memory = 8.GB
                time = 3.h
            }
            withName: bamReadcountForVarscanFpFilter_bamreadcount {
                container = "containers/bam-readcount-0.8.simg"
                cpus = 2
                memory = { 8.GB + 3.GB * task.cpus }
                time = 13.h
                errorStrategy = { task.exitStatus in [127,255] ? 'retry' : 'ignore' }
                maxRetries = 1
            }
            withName: falsePositivefilterSnvAndIndels_varscan {
                container = "containers/mgpcore-1.0.simg"
                cpus = 1
                memory = 12.GB
                time = 24.h
            }
            withName: splitMultiallelicAndLeftNormalizeVarscanVcf_bcftools {
                container = "containers/mgpcore-1.0.simg"
                cpus = 4
                memory = 256.MB
                time = 3.h
            }
            withName: mutect2GnomadReferenceVcfPrep_bcftools {
                container = "containers/mgpcore-1.0.simg"
                cpus = 4
                memory = 2.GB
                time = 24.h
            }
            withName: snvAndIndelCalling_gatk {
                container = "containers/gatk-4.3.0.0.simg"
                cpus = 2
                memory = { 8.GB + 4.GB * task.cpus }
                time = 48.h
                errorStrategy = 'retry'
                maxRetries = 1
            }
            withName: mergeAndSortMutect2Vcfs_gatk {
                container = "containers/gatk-4.3.0.0.simg"
                cpus = 1
                memory = 18.GB
                time = 3.h
            }
            withName: mergeMutect2StatsForFiltering_gatk {
                container = "containers/gatk-4.3.0.0.simg"
                cpus = 1
                memory = 12.GB
                time = 3.h
            }
            withName: pileupSummariesForMutect2Contamination_gatk {
                container = "containers/gatk-4.3.0.0.simg"
                cpus = 1
                memory = 12.GB
                time = 13.h
                errorStrategy = 'retry'
                maxRetries = 1
            }
            withName: gatherTumorPileupSummariesForMutect2Contamination_gatk {
                container = "containers/gatk-4.3.0.0.simg"
                cpus = 1
                memory = 12.GB
                time = 3.h
            }
            withName: gatherNormalPileupSummariesForMutect2Contamination_gatk {
                container = "containers/gatk-4.3.0.0.simg"
                cpus = 1
                memory = 12.GB
                time = 3.h
            }
            withName: mutect2ContaminationCalculation_gatk {
                container = "containers/gatk-4.3.0.0.simg"
                cpus = 1
                memory = 12.GB
                time = 3.h
            }
            withName: mutect2VariantFiltration_gatk {
                container = "containers/gatk-4.3.0.0.simg"
                cpus = 1
                memory = 12.GB
                time = 24.h
            }
            withName: splitMultiallelicAndLeftNormalizeMutect2Vcf_bcftools {
                container = "containers/mgpcore-1.0.simg"
                cpus = 4
                memory = 256.MB
                time = 3.h
            }
            withName: splitMutectSnvsAndIndelsForConsensus_bcftools {
                container = "containers/mgpcore-1.0.simg"
                cpus = 4
                memory = 256.MB
                time = 3.h
            }
            withName: bamPileupForConpair_conpair {
                container = "containers/conpair-0.2.simg"
                cpus = 1
                memory = 1.GB
                time = 3.h
            }
            withName: concordanceAndContaminationEstimation_conpair {
                container = "containers/conpair-0.2.simg"
                cpus = 1
                memory = 1.GB
                time = 3.h
            }
            withName: prepGermlineBedForCaveman_bedops {
                container = "containers/mgpcore-1.0.simg"
                cpus = 1
                memory = 256.MB
                time = 30.m
            }
            withName: setup_caveman {
                container = "containers/cgp-caveman-1.18.3.simg"
                cpus = 1
                memory = 256.MB
                time = 30.m
            }
            withName: split_caveman {
                container = "containers/cgp-caveman-1.18.3.simg"
                cpus = 1
                memory = { 4.GB * task.attempt }
                time = { 1.h * task.attempt }
                errorStrategy = 'retry'
                maxRetries = 3
            }
            withName: splitConcat_caveman {
                container = "containers/cgp-caveman-1.18.3.simg"
                cpus = 1
                memory = 1.GB
                time = 30.m
            }
            withName: mstep_caveman {
                container = "containers/cgp-caveman-1.18.3.simg"
                cpus = 1
                memory = { 10.GB * task.attempt }
                time = { 30.m * task.attempt }
                errorStrategy = 'retry'
                maxRetries = 3
            }
            withName: merge_caveman {
                container = "containers/cgp-caveman-1.18.3.simg"
                cpus = 1
                memory = 256.MB
                time = 30.m
            }
            withName: snvCalling_caveman {
                container = "containers/cgp-caveman-1.18.3.simg"
                cpus = 1
                memory = { 10.GB * task.attempt }
                time = { 30.m * task.attempt }
                errorStrategy = 'retry'
                maxRetries = 3
            }
            withName: flag_caveman {
                container = "containers/cgp-caveman-1.18.3.simg"
                cpus = 1
                memory = { 512.MB * task.attempt }
                time = { 30.m * task.attempt }
                errorStrategy = 'retry'
                maxRetries = 3
            }
            withName: mergeResults_caveman {
                container = "containers/cgp-caveman-1.18.3.simg"
                cpus = 1
                memory = 256.MB
                time = { 30.m * task.attempt }
                errorStrategy = 'retry'
                maxRetries = 3
            }
            withName: unionAndConsensusSnvCalls_devgru {
                container = "containers/devgru-0.0.0.9000.simg"
                cpus = 12
                memory = { 8.GB + 2.GB * task.cpus }
                time = 2.h
                errorStrategy = { task.exitStatus in [127] ? 'retry' : 'ignore' }
                maxRetries = 1
            }
            withName: unionAndConsensusLowCovSnvCalls_devgru {
                container = "containers/devgru-0.0.0.9000.simg"
                cpus = 12
                memory = { 8.GB + 2.GB * task.cpus }
                time = 2.h
                errorStrategy = { task.exitStatus in [127] ? 'retry' : 'ignore' }
                maxRetries = 1
            }
            withName: unionAndConsensusIndelCalls_devgru {
                container = "containers/devgru-0.0.0.9000.simg"
                cpus = 12
                memory = { 8.GB + 2.GB * task.cpus }
                time = 2.h
                errorStrategy = { task.exitStatus in [127] ? 'retry' : 'ignore' }
                maxRetries = 1
            }
            withName: twoWayMergeAndGenerateConsensusCnvCalls_bedtools {
                container = "containers/mgpcore-1.0.simg"
                cpus = 1
                memory = 1.GB
                time = 1.h
            }
            withName: mergeAndGenerateConsensusSvCalls_ggnome {
                container = "containers/ggnome-1.1.simg"
                cpus = 1
                memory = 12.GB
                time = { 30.m * task.attempt * 3 } 
                errorStrategy = { task.exitStatus in [127,140] ? 'retry' : 'ignore' }
                maxRetries = 1
            }
            withName: binReadCoverageInNormal_fragcounter {
                container = "containers/fragcounter-0.0.0.9000.simg"
                cpus = 1
                memory = 24.GB
                time = 13.h
                errorStrategy = { task.exitStatus in [127,140] ? 'retry' : 'ignore' }
                maxRetries = 1
            }
            withName: binReadCoverageInTumor_fragcounter {
                container = "containers/fragcounter-0.0.0.9000.simg"
                cpus = 1
                memory = 24.GB
                time = 13.h
                errorStrategy = { task.exitStatus in [127,140] ? 'retry' : 'ignore' }
                maxRetries = 1
            }
            withName: snpPileup_fragcounter {
                container = "containers/iarc-facets-2.0.simg"
                cpus = 1
                memory = 14.GB
                time = 8.h
            }
            withName: telomereLengthEstimation_telomerecat {
                container = "containers/telomerecat-3.4.0.simg"
                cpus = 8
                memory = { 2.GB + 1.GB * task.cpus }
                time = 24.h
            }
            withName: telomereEstimation_telomerehunter {
                container = "containers/telomerehunter-1.1.0.simg"
                cpus = 2
                memory = { 2.GB + 1.GB * task.cpus }
                time = 24.h
            }
        }
	}
}

// #################################################### \\
